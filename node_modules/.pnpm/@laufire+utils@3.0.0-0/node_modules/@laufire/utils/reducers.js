"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.flat = exports.reducer = exports.max = exports.min = exports.count = exports.len = exports.avg = exports.product = exports.sum = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _lib = require("./lib");

var _reflection = require("./reflection");

/**
 * A set of functions and partials to be used with reducers.
 */
var sum = function sum(t, c) {
  return t + c;
};

exports.sum = sum;

var product = function product(t, c) {
  return t * c;
};

exports.product = product;

var avg = function avg(t, c, dummy, collection) {
  return t + c / (0, _lib.keys)(collection).length;
};

exports.avg = avg;

var len = function len(t) {
  return t + 1;
};

exports.len = len;

var count = function count(value) {
  return function (t, c) {
    return t + (c === value ? 1 : 0);
  };
};

exports.count = count;

var min = function min(t, c) {
  return t < c ? t : c;
};

exports.min = min;

var max = function max(t, c) {
  return t > c ? t : c;
}; // LATER: Think of introducing flat for objects.


exports.max = max;

var flat = function flat(t, c) {
  return [].concat((0, _toConsumableArray2["default"])(t), (0, _toConsumableArray2["default"])((0, _reflection.isArray)(c) ? c.flat(Infinity) : [c]));
};
/**
 * A function to derive reducers from collection functions like merge,
 * compose, squash and adopt.
 */
// LATER: Rename the function to highlight the use of underlying collection.


exports.flat = flat;

var reducer = function reducer(fn) {
  return function (t, c) {
    return fn(t, c);
  };
};

exports.reducer = reducer;