"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _collection = require("@laufire/utils/collection");

var _random = require("@laufire/utils/random");

var _helpers = require("../test/helpers");

var _reducers = require("./reducers");

/* Helpers */

/* Tested */

/* Spec */
describe('Reducers', function () {
  var getRndCollection = function getRndCollection() {
    return (0, _collection.secure)((0, _collection.map)((0, _helpers.rndCollection)(), function () {
      return (0, _random.rndBetween)(-10, 10);
    }));
  };

  describe('sum sums the given candidates', function () {
    test('example', function () {
      var input = [1, 2, 3];
      var initial = 0;
      var expected = 6;
      var result = (0, _collection.reduce)(input, _reducers.sum, initial);
      expect(result).toEqual(expected);
    });
    test('randomized test', function () {
      (0, _helpers.retry)(function () {
        var collection = getRndCollection();
        var expected = 0;
        (0, _collection.map)(collection, function (value) {
          return expected += value;
        });
        var result = (0, _collection.reduce)(collection, _reducers.sum, 0);
        expect(result).toEqual(expected);
      });
    });
  });
  describe('product multiplies the given candidates', function () {
    test('example', function () {
      var input = [1, 2, 3];
      var initial = 1;
      var expected = 6;
      var result = (0, _collection.reduce)(input, _reducers.product, initial);
      expect(result).toEqual(expected);
    });
    test('randomized test', function () {
      (0, _helpers.retry)(function () {
        var collection = getRndCollection();
        var expected = 1;
        (0, _collection.map)(collection, function (value) {
          return expected *= value;
        });
        var result = (0, _collection.reduce)(collection, _reducers.product, 1);
        expect(result).toEqual(expected);
      });
    });
  });
  describe('length returns the length of the given collection', function () {
    test('example', function () {
      var input = [1, 2, 3];
      var initial = 0;
      var expected = 3;
      var result = (0, _collection.reduce)(input, _reducers.len, initial);
      expect(result).toEqual(expected);
    });
    test('randomized test', function () {
      (0, _helpers.retry)(function () {
        var collection = getRndCollection();
        var expected = 0;
        (0, _collection.map)(collection, function () {
          return expected += 1;
        });
        var result = (0, _collection.reduce)(collection, _reducers.len, 0);
        expect(result).toEqual(expected);
      });
    });
  });
  describe('avg computes the average of the given candidates', function () {
    test('example', function () {
      var input = [1, 2, 3];
      var initial = 0;
      var expected = 2;
      var result = (0, _collection.reduce)(input, _reducers.avg, initial);
      expect(result).toEqual(expected);
    });
    test('randomized test', function () {
      (0, _helpers.retry)(function () {
        var collection = getRndCollection();
        var total = 0;
        (0, _collection.map)(collection, function (value) {
          return total += value;
        });
        var expected = total / (0, _collection.values)(collection).length;
        var result = (0, _collection.reduce)(collection, _reducers.avg, 0);
        expect((0, _helpers.fixNumber)(Math.abs(result))).toEqual((0, _helpers.fixNumber)(Math.abs(expected)));
      });
    });
  });
  describe('count returns the number of occurrences of the given counted' + ' among the given candidates', function () {
    test('example', function () {
      var input = [1, 2, 3, 1, 1, 1];
      var initial = 0;
      var expected = 4;
      var result = (0, _collection.reduce)(input, (0, _reducers.count)(1), initial);
      expect(result).toEqual(expected);
    });
    test('randomized test', function () {
      (0, _helpers.retry)(function () {
        var collection = getRndCollection();
        var existing = (0, _random.rndValue)(collection);
        var nonExistent = Math.max.apply(Math, (0, _toConsumableArray2["default"])((0, _collection.values)(collection))) + 1;
        var summarized = (0, _helpers.summarize)(collection);
        var expectations = [[existing, summarized[existing]], [nonExistent, 0]];
        (0, _collection.map)(expectations, function (_ref) {
          var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
              value = _ref2[0],
              expected = _ref2[1];

          return expect((0, _collection.reduce)(collection, (0, _reducers.count)(value), 0)).toEqual(expected);
        });
      });
    });
  });
  describe('min finds the smallest of the given candidates', function () {
    test('example', function () {
      var input = [1, 2, 3];
      var expected = 1;
      expect((0, _collection.reduce)(input, _reducers.min)).toEqual(expected);
    });
    test('randomized test', function () {
      (0, _helpers.retry)(function () {
        var collection = getRndCollection();
        var minValue = Math.min.apply(Math, (0, _toConsumableArray2["default"])((0, _collection.values)(collection)));
        expect((0, _collection.reduce)(collection, _reducers.min)).toEqual(minValue);
        expect((0, _collection.reduce)(collection, _reducers.min, Infinity)).toEqual(minValue);
      });
    });
  });
  describe('max finds the largest of the given candidates', function () {
    test('example', function () {
      var input = [1, 2, 3];
      var expected = 3;
      expect((0, _collection.reduce)(input, _reducers.max)).toEqual(expected);
    });
    test('randomized test', function () {
      (0, _helpers.retry)(function () {
        var collection = getRndCollection();
        var maxValue = Math.max.apply(Math, (0, _toConsumableArray2["default"])((0, _collection.values)(collection)));
        expect((0, _collection.reduce)(collection, _reducers.max)).toEqual(maxValue);
        expect((0, _collection.reduce)(collection, _reducers.max, -Infinity)).toEqual(maxValue);
      });
    });
  });
  describe('reducer derives reducers from ' + 'relevant collection functions', function () {
    test('example', function () {
      var input = [{
        a: 1,
        b: 2,
        c: 5
      }, {
        a: 3,
        b: 4,
        d: 6
      }];
      var expected = {
        a: 3,
        b: 4,
        c: 5,
        d: 6
      };
      var result = (0, _collection.reduce)(input, (0, _reducers.reducer)(_collection.merge), {});
      expect(result).toEqual(expected);
    });
    test('randomized test', function () {
      (0, _helpers.retry)(function () {
        var generator = (0, _random.rndValue)([_helpers.rndArray, _helpers.rndDict]);
        var extensions = (0, _collection.map)((0, _helpers.rndRange)(), function () {
          return generator();
        });

        var _extensions = (0, _slicedToArray2["default"])(extensions, 1),
            base = _extensions[0];

        var expected = _collection.merge.apply(void 0, [(0, _collection.shell)(base)].concat((0, _toConsumableArray2["default"])(extensions)));

        var result = (0, _collection.reduce)(extensions, (0, _reducers.reducer)(_collection.merge), (0, _collection.shell)(base));
        expect(result).toEqual(expected);
      });
    });
  });
  describe('flat flattens the given array recursively', function () {
    test('example', function () {
      var nestedArray = [1, 2, [3, [4]]];
      var expectation = [1, 2, 3, 4];
      var result = (0, _collection.reduce)(nestedArray, _reducers.flat, []);
      expect(result).toEqual(expectation);
    });
    test('randomized test', function () {
      (0, _helpers.retry)(function () {
        var nestedArray = (0, _helpers.rndNested)(3, 3, ['nested', 'array']);
        var expectation = nestedArray.flat(Infinity);
        var result = (0, _collection.reduce)(nestedArray, _reducers.flat, []);
        expect(result).toEqual(expectation);
      });
    });
  });
});