"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compile = exports.onProp = exports.reverse = exports.existing = exports.descending = exports.ascending = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _lib = require("./lib");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/* Exports */
var ascending = function ascending(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};

exports.ascending = ascending;

var descending = function descending(a, b) {
  return a < b ? 1 : a > b ? -1 : 0;
};

exports.descending = descending;

var existing = function existing() {
  return 0;
};

exports.existing = existing;

var reverse = function reverse() {
  return -1;
};

exports.reverse = reverse;

var onProp = function onProp(prop, sorter) {
  return function (a, b) {
    return sorter(a[prop], b[prop]);
  };
};

exports.onProp = onProp;
var defaultGrammar = {
  ascending: ascending,
  descending: descending,
  existing: existing,
  reverse: reverse
};

var compile = function compile(config, grammarExt) {
  var grammar = _objectSpread(_objectSpread({}, defaultGrammar), grammarExt);

  var props = (0, _lib.keys)(config);
  return function (a, b) {
    var result = 0;
    props.find(function (prop) {
      return (result = grammar[config[prop]](a[prop], b[prop])) !== 0;
    });
    return result;
  };
};

exports.compile = compile;