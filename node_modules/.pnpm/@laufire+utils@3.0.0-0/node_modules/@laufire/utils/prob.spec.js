"use strict";

var _collection = require("@laufire/utils/collection");

var _predicates = require("@laufire/utils/predicates");

var _helpers = require("../test/helpers");

var _prob = require("./prob");

test('isProbable returns true based on given probability', function () {
  var retryCount = 50000;

  var generateTest = function generateTest(probability, errorMargin) {
    var results = (0, _helpers.retry)(function () {
      return (0, _prob.isProbable)(probability);
    }, retryCount);
    var successCount = results.filter((0, _predicates.isEqual)(true)).length;
    var expectedCount = Math.min(probability, 1) * retryCount;
    return (0, _helpers.isAcceptable)(successCount, expectedCount, errorMargin);
  };

  var testCandidates = function testCandidates(candidates, margin) {
    var results = candidates.map(function (probability) {
      return generateTest(probability, margin);
    });
    var successCount = results.filter((0, _predicates.isEqual)(true)).length;
    expect(successCount).toEqual(results.length);
  };

  testCandidates([0, 1, 2], 0);
  testCandidates((0, _collection.range)(2, 20).map(function (probability) {
    return probability / 100;
  }), 0.08);
});
describe('possibilities', function () {
  describe('example', function () {
    test('returns possibilities of given cases', function () {
      var arrayCombos = (0, _prob.possibilities)([['a', 'b'], [1, 2, 3]]);
      var objectCombos = (0, _prob.possibilities)({
        item: ['apple', 'banana'],
        price: [1, 2, 3]
      });
      expect(arrayCombos).toEqual([['a', 1], ['a', 2], ['a', 3], ['b', 1], ['b', 2], ['b', 3]]);
      expect(objectCombos).toEqual([{
        item: 'apple',
        price: 1
      }, {
        item: 'apple',
        price: 2
      }, {
        item: 'apple',
        price: 3
      }, {
        item: 'banana',
        price: 1
      }, {
        item: 'banana',
        price: 2
      }, {
        item: 'banana',
        price: 3
      }]);
    });
  });
  describe('randomized test', function () {
    test('returns possibilities of given cases', function () {
      var inputs = (0, _collection.map)((0, _helpers.rndCollection)(2, 3), function () {
        return (0, _helpers.rndArray)(2, 3);
      });
      var expectedLength = (0, _collection.reduce)(inputs, function (t, c) {
        return t * c.length;
      }, 1);
      var result = (0, _prob.possibilities)(inputs);
      var mismatch = (0, _collection.find)(result, function (possibility) {
        return (0, _collection.find)(possibility, function (value, key) {
          return !inputs[key].includes(value);
        });
      }); // TODO: Use collection.find post publishing.

      var duplicate = result.find(function (possibility, i, array) {
        return array.slice(i + 1).includes(possibility);
      });
      (0, _helpers.expectEquals)(result.length, expectedLength);
      (0, _helpers.expectEquals)(mismatch, undefined);
      (0, _helpers.expectEquals)(duplicate, undefined);
    });
  });
});