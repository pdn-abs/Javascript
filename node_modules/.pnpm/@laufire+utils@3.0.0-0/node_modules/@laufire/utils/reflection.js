"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSimple = exports.isEmpty = exports.isDefined = exports.isObject = exports.isDict = exports.isFunction = exports.isIterable = exports.isCollection = exports.isArray = exports.inferType = exports.constructorName = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _lib = require("./lib");

/**
 * Reflection
 */

/* Helpers */
var isArray = _lib.isArray;
exports.isArray = isArray;

var constructorName = function constructorName(value) {
  return (value === null || value === void 0 ? void 0 : value.constructor.name) || undefined;
};
/*
NOTE: Unlike inferType, this function doesn't differentiate between
	functions and async functions.
*/


exports.constructorName = constructorName;

var isFunction = function isFunction(value) {
  return typeof value === 'function';
};

exports.isFunction = isFunction;

var isDict = function isDict(value) {
  return constructorName(value) === 'Object';
};

exports.isDict = isDict;

var isObject = function isObject(value) {
  return (0, _typeof2["default"])(value) === 'object' && ![undefined, 'Array'].includes(constructorName(value));
};

exports.isObject = isObject;

var isIterable = function isIterable(value) {
  return isArray(value) || isDict(value);
};

exports.isIterable = isIterable;

var isDefined = function isDefined(value) {
  return value !== undefined;
};

exports.isDefined = isDefined;

var inferType = function inferType(value) {
  var startpos = 8;
  var endpos = -1;
  var type = (0, _typeof2["default"])(value);
  return type !== 'object' ? type : value !== null ? Object.prototype.toString.call(value).slice(startpos, endpos).toLowerCase() : 'null';
};
/* Aliases */


exports.inferType = inferType;
var isCollection = isIterable;
exports.isCollection = isCollection;

var isEmpty = function isEmpty(value) {
  return [null, undefined, NaN].includes(value);
};

exports.isEmpty = isEmpty;

var isSimple = function isSimple(value) {
  return !isEmpty(value) && ['number', 'string', 'boolean'].includes(inferType(value));
};

exports.isSimple = isSimple;