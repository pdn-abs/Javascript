"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _collection = require("@laufire/utils/collection");

var _random = require("@laufire/utils/random");

var _reflection = require("@laufire/utils/reflection");

var _predicates = require("@laufire/utils/predicates");

var _reducers = require("@laufire/utils/reducers");

var _helpers = require("../test/helpers");

var _random2 = require("./random");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/* Tests */
describe('rndBetween helps in generating random numbers', function () {
  var isBetween = function isBetween(value, from, to) {
    expect(value >= from).toBe(true);
    expect(value < to).toBe(true);
  };

  var getPrecision = function getPrecision(number) {
    var _String$split$;

    return ((_String$split$ = String(number).split('.')[1]) === null || _String$split$ === void 0 ? void 0 : _String$split$.length) || 0;
  };

  var hasPrecision = function hasPrecision(number, precision) {
    return expect(getPrecision(number)).toBeLessThanOrEqual(precision);
  };

  describe('examples', function () {
    test('rndBetween returns a random number between two numbers', function () {
      var from = -10;
      var to = 10;
      (0, _helpers.retry)(function () {
        return isBetween((0, _random2.rndBetween)(from, to), from, to);
      });
    });
    test('rndBetween returns a rndNumber for the given precision', function () {
      var from = 1;
      var to = 10;
      var precision = 2;
      (0, _helpers.retry)(function () {
        return hasPrecision((0, _random2.rndBetween)(from, to, precision), precision);
      });
    });
    test('rndBetween defaults to 0 for from, 10 for to and 0 for precision', function () {
      var from = 0;
      var to = 10;
      var precision = 0;
      (0, _helpers.retry)(function () {
        var result = (0, _random2.rndBetween)();
        isBetween(result, from, to);
        hasPrecision(result, precision);
      });
    });
  });
  describe('randomized tests', function () {
    test('values test', function () {
      var retryCount = 50000;
      var from = -2;
      var to = 2;
      var possibleValues = (0, _collection.range)(from, to);
      var results = (0, _helpers.retry)(function () {
        return (0, _random2.rndBetween)(from, to);
      }, retryCount);
      (0, _helpers.testRatios)(results, (0, _helpers.getRatios)(possibleValues));
    });
    test('precision test', function () {
      var retryCount = 50000;
      var from = -2;
      var to = 2;
      var precision = 2;
      var expected = 0.9;
      var results = (0, _helpers.retry)(function () {
        return (0, _random2.rndBetween)(from, to, precision);
      }, retryCount);
      var precisions = (0, _collection.map)(results, getPrecision);
      var summarized = (0, _helpers.summarize)(precisions);
      var actual = summarized[precision] / retryCount;
      (0, _helpers.isAcceptable)(actual, expected);
    });
  });
});
describe('rndString', function () {
  test('returns a random string based on the given seed' + ' and count', function () {
    var seed = 'abcd';
    var count = 2;
    var result = (0, _random2.rndString)(count, seed);
    expect(result.length).toBe(count);
    expect((0, _helpers.strSubSet)(seed, result)).toBe(true);
  });
  test('rndString returns a randomString based on the' + ' given stringSeed', function () {
    (0, _helpers.retry)(function () {
      var seed = (0, _random2.rndValue)(_random2.stringSeeds);
      var count = (0, _random.rndBetween)(0, 9);
      var result = (0, _random2.rndString)(count, seed);
      expect((0, _helpers.strSubSet)(seed, result)).toBe(true);
    });
  });
  test('count defaults to 8 and seed defaults to char', function () {
    var seed = _random2.stringSeeds["char"];
    var count = 8;
    (0, _helpers.retry)(function () {
      var result = (0, _random2.rndString)();
      expect(result.length).toBe(count);
      expect((0, _helpers.strSubSet)(seed, result)).toBe(true);
    });
  });
  test('ratio test', function () {
    var seed = 'abc';
    var count = 1;
    var retryCount = 50000;
    var results = (0, _helpers.retry)(function () {
      return (0, _random2.rndString)(count, seed);
    }, retryCount);
    (0, _helpers.testRatios)(results, (0, _helpers.getRatios)(seed.split('')));
  });
});
describe('rndOfString returns a random sub-string of the given string.', function () {
  var retryCount = 50000;
  describe('count defaults to random value', function () {
    test('example', function () {
      var string = 'ab';
      var expected = ['', 'a', 'b', 'ab', 'ba'];
      var result = (0, _random2.rndOfString)(string);
      expect(result.length).not.toBeGreaterThan(string.length);
      expect(expected.includes(result)).toBe(true);
    });
    test('randomized test', function () {
      var length = (0, _random.rndBetween)(0, 3); // TODO: Use imported function rndValues after publishing.

      var seed = 'ab';
      var seedArray = (0, _random2.rndValues)(seed.split(''), length);
      var seedStr = seedArray.join('');
      var possibleLengths = (0, _collection.range)(0, seedStr.length + 1);
      var results = (0, _helpers.retry)(function () {
        return (0, _random2.rndOfString)(seedStr);
      }, retryCount);
      var resultsArray = (0, _collection.map)(results, function (result) {
        return result.split('');
      });
      var resultLengths = (0, _collection.map)(resultsArray, function (result) {
        return result.length;
      });
      (0, _helpers.testRatios)(resultLengths, (0, _helpers.getRatios)(possibleLengths));
    });
  });
  describe('count is limited to the length of the source string', function () {
    test('example', function () {
      var string = 'abcd';
      var count = 8;
      var result = (0, _random2.rndOfString)(string, count);
      expect(result.length).toEqual(string.length);
      expect((0, _helpers.strSubSet)(string, result)).toBe(true);
    });
    test('randomized test', function () {
      (0, _helpers.retry)(function () {
        var string = (0, _random.rndString)();
        var count = string.length;
        var result = (0, _random2.rndOfString)(string, count); // TODO: Use collection.count after publishing.

        expect(result.length).toEqual(string.length);
        expect((0, _helpers.strSubSet)(string, result)).toBe(true);
      });
    });
  });
  describe('returns the given count number of string when the string length' + ' is longer than the given count', function () {
    test('example', function () {
      var string = 'abcd';
      var count = 2;
      var result = (0, _random2.rndOfString)(string, count);
      (0, _helpers.expectEquals)(result.length, count);
      (0, _helpers.expectEquals)((0, _helpers.strSubSet)(string, result), true);
    });
    test('randomized test', function () {
      (0, _helpers.retry)(function () {
        var string = (0, _random.rndString)();
        var count = (0, _random.rndBetween)(0, string.length - 1);
        var result = (0, _random2.rndOfString)(string, count);
        (0, _helpers.expectEquals)(result.length, count);
        (0, _helpers.expectEquals)((0, _helpers.strSubSet)(string, result), true);
      });
    });
  });
  test('ratio test', function () {
    // TODO: Use imported function rndValues after publishing.
    var seed = 'ab';
    var seedArray = (0, _random2.rndValues)(seed.split(''), (0, _random.rndBetween)(0, 3));
    var seedStr = seedArray.join('');
    var results = (0, _helpers.retry)(function () {
      return (0, _random2.rndOfString)(seedStr);
    }, retryCount);
    var resultsArray = (0, _collection.map)(results, function (result) {
      return result.split('');
    });
    (0, _helpers.testRatios)(resultsArray.flat(), (0, _helpers.getRatios)(seedArray));
  });
});
describe('rndValue returns a random a value from the given iterable.', function () {
  test('example', function () {
    var iterable = {
      a: 1,
      b: 2,
      c: 3,
      d: 4
    };
    var result = (0, _random2.rndValue)(iterable);
    expect((0, _collection.has)(iterable, result)).toEqual(true);
  });
  test('returns undefined when the iterable is empty', function () {
    expect((0, _random2.rndValue)([])).toBeUndefined();
    expect((0, _random2.rndValue)({})).toBeUndefined();
  });
  test('randomized test', function () {
    (0, _helpers.retry)(function () {
      var rndColl = (0, _helpers.rndCollection)();
      var result = (0, _random2.rndValue)(rndColl);
      expect((0, _collection.has)(rndColl, result)).toEqual(true);
    });
  });
  test('ratio test', function () {
    var retryCount = 50000;
    var rndColl = (0, _helpers.rndCollection)();
    var results = (0, _helpers.retry)(function () {
      return (0, _random2.rndValue)(rndColl);
    }, retryCount);
    (0, _helpers.testRatios)(results, (0, _helpers.getRatios)(rndColl));
  });
});
describe('rndValues returns the given count of random a values' + 'from the given iterable', function () {
  var retryCount = 50000;
  describe('returns the given count number of values when the iterable length' + ' is longer than the given count', function () {
    test('example', function () {
      var iterable = {
        a: 1,
        b: 2,
        c: 3,
        d: 4
      };
      var count = 2;
      var result = (0, _random2.rndValues)(iterable, count);
      (0, _helpers.expectEquals)((0, _collection.contains)(iterable, result), true);
      (0, _helpers.expectEquals)((0, _collection.values)(result).length, count);
    });
    test('randomized test', function () {
      var verifiers = {
        array: function array(iterable, result) {
          // TODO: Use library filter after publishing.
          expect(result.filter(_predicates.unique)).toEqual(result);
          (0, _collection.map)(result, function (value) {
            return expect((0, _collection.has)(iterable, value)).toEqual(true);
          });
        },
        object: function object(iterable, result) {
          expect((0, _collection.contains)(iterable, result)).toEqual(true);
        }
      };
      (0, _helpers.retry)(function () {
        var rndColl = (0, _helpers.rndCollection)();
        var count = (0, _random.rndBetween)(0, (0, _collection.values)(rndColl).length - 1);
        var rndCollType = (0, _reflection.inferType)(rndColl);
        var result = (0, _random2.rndValues)(rndColl, count);
        expect((0, _collection.values)(result).length).toEqual(count);
        expect(rndCollType).toEqual((0, _reflection.inferType)(result));
        verifiers[rndCollType](rndColl, result);
      });
    });
  });
  describe('count is limited to the length of the source iterable', function () {
    test('example', function () {
      var iterable = {
        a: 1,
        b: 2,
        c: 3,
        d: 4
      };
      var count = 8;
      var result = (0, _random2.rndValues)(iterable, count);
      expect((0, _collection.values)(result).length).toEqual((0, _collection.values)(iterable).length);
    });
    test('randomized test', function () {
      (0, _helpers.retry)(function () {
        var rndColl = (0, _helpers.rndCollection)();
        var count = (0, _collection.values)(rndColl).length;
        var result = (0, _random2.rndValues)(rndColl, count); // TODO: Use collection.count after publishing.

        expect((0, _collection.values)(result).length).toEqual((0, _collection.values)(rndColl).length);
      });
    });
  });
  describe('count defaults to random value', function () {
    test('example', function () {
      var iterable = {
        a: 1,
        b: 2,
        c: 3,
        d: 4
      };
      var result = (0, _random2.rndValues)(iterable);
      expect((0, _collection.values)(result).length).not.toBeGreaterThan((0, _collection.values)(iterable).length);
    });
    test('randomized test', function () {
      var length = (0, _random.rndBetween)(0, 3);
      var rndColl = (0, _helpers.rndCollection)(0, length);
      var possibleLengths = (0, _collection.range)(0, rndColl.length + 1);
      var results = (0, _helpers.retry)(function () {
        return (0, _random2.rndValues)(rndColl);
      }, retryCount);
      var resultLengths = (0, _collection.map)(results, function (result) {
        return result.length;
      });
      (0, _helpers.testRatios)(resultLengths, (0, _helpers.getRatios)(possibleLengths));
    });
  });
  test('ratio test', function () {
    var rndColl = (0, _helpers.rndCollection)(0, (0, _random.rndBetween)(0, 3));
    var results = (0, _helpers.retry)(function () {
      return (0, _random2.rndValues)(rndColl);
    }, retryCount);
    (0, _helpers.testRatios)(results.flat(), (0, _helpers.getRatios)(rndColl));
  });
});
describe('rndValueWeighted returns a random a value from' + ' the given weight table according to the given weights.', function () {
  test('example', function () {
    var retryCount = 1000;
    var weights = {
      a: 1,
      b: 3
    };
    var results = (0, _helpers.retry)((0, _random2.rndValueWeighted)(weights), retryCount);
    var summarized = (0, _helpers.summarize)(results);
    var a = summarized.a,
        b = summarized.b;
    expect(a > 200 && a < 300).toBe(true);
    expect(b > 700 && b < 800).toBe(true);
  });
  test('ratios test', function () {
    var weights = (0, _collection.secure)((0, _collection.reduce)((0, _helpers.rndDict)(0, (0, _random.rndBetween)(0, 3)), function (acc, dummy, key) {
      return _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2["default"])({}, key, (0, _random.rndBetween)(0, 3)));
    }, {}));
    var totalWeights = (0, _collection.reduce)(weights, _reducers.sum, 0);
    var ratios = (0, _collection.reduce)(weights, function (acc, value, key) {
      return _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2["default"])({}, key, value / totalWeights || 0));
    }) || {
      undefined: 1
    };
    var results = (0, _helpers.retry)((0, _random2.rndValueWeighted)(weights), 50000);
    (0, _helpers.testRatios)(results, ratios);
  });
  test('returns undefined when the iterable is empty', function () {
    expect((0, _random2.rndValueWeighted)({})()).toBeUndefined();
  });
});