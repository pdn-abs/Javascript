"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unescape = exports.escape = exports.resolve = exports.pathType = exports.fix = exports.parts = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _collection = require("./collection");

var _reflection = require("./reflection");

var initialSlash = /^\//;

var fix = function fix(path) {
  return [[/^(?!(?:\.+\/)|\/|^\.+$)/, './'], [/^(\.+)$/, '$1/'], [/([^/]|(^|[^\\])((?:\\{2})*)\\\/)$/, '$1/']].reduce(function (acc, _ref) {
    var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
        matcher = _ref2[0],
        replacement = _ref2[1];

    return acc.match(matcher) ? acc.replace(matcher, replacement) : acc;
  }, String(path));
};

exports.fix = fix;

var parts = function () {
  var matcher = /(?:(?:[^/\\]|\\.)*\/)/g;
  return function (path) {
    return ("".concat(fix(path)).replace(initialSlash, '').match(matcher) || []).map(function (part) {
      return part.slice(0, -1);
    });
  };
}();

exports.parts = parts;

var join = function join(pathParts) {
  return "".concat(pathParts.join('/'), "/");
};

var pathType = function () {
  var types = {
    absolute: /^\/(?:(?:[^\\/\\]|\\.)*\/)*$/,
    relative: /^\.+\/(?:(?:[^\\/\\]|\\.)*\/)*$/,
    lax: /.*/
  };
  return function (path) {
    return (0, _collection.findKey)(types, function (matcher) {
      return matcher.test(path);
    });
  };
}();

exports.pathType = pathType;

var appendLabel = function appendLabel(baseParts, part) {
  return baseParts.concat(part);
};

var navigate = function navigate(baseParts, part) {
  var diff = part.length - baseParts.length;
  return diff > 0 ? ["".concat(baseParts[0]).concat('.'.repeat(diff))] : baseParts.slice(0, 1 - part.length || baseParts.length);
}; // eslint-disable-next-line max-lines-per-function


var resolve = function () {
  var navigationMarker = /^\.+$/;

  var isAbsolute = function isAbsolute(path) {
    return pathType(path) === 'absolute';
  };

  return function () {
    for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {
      paths[_key] = arguments[_key];
    }

    var fixedPaths = (0, _collection.map)(paths, fix);
    var absoluteKey = (0, _collection.findLastKey)(fixedPaths, isAbsolute);
    var trimmed = fixedPaths.slice(absoluteKey);
    var reduced = (0, _collection.reduce)(trimmed, function (baseParts, path) {
      return (0, _collection.reduce)(parts(path), function (acc, part) {
        return (navigationMarker.test(part) ? navigate : appendLabel)(acc, part);
      }, baseParts);
    }, ['.']);
    return (0, _reflection.isDefined)(absoluteKey) ? reduced[0].length > 1 ? undefined : join([''].concat((0, _toConsumableArray2["default"])(reduced.slice(1)))) : join(reduced);
  };
}();

exports.resolve = resolve;

var escape = function () {
  var escapePattern = /([\\.\\/\\])/g;
  return function (path) {
    return path.replace(escapePattern, '\\$1');
  };
}();

exports.escape = escape;

var unescape = function () {
  var unescapePattern = /\\(.|$)/g;
  return function (path) {
    return path.replace(unescapePattern, '$1');
  };
}();

exports.unescape = unescape;