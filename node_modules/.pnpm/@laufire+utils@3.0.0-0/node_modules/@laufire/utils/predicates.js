"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.is = exports.value = exports.key = exports.isIn = exports.predicate = exports.onProp = exports.or = exports.and = exports.not = exports.unique = exports.first = exports.nothing = exports.everything = exports.falsy = exports.truthy = exports.doesContain = exports.isPart = exports.isSame = exports.isEqual = void 0;

var _collection = require("./collection");

var _lib = require("./lib");

var _reflection = require("./reflection");

/**
 * A set of predicate functions and partials to be used with filters.
 *
 */

/* Exports */
var isEqual = function isEqual(left) {
  return function (right) {
    return (0, _collection.equals)(left, right);
  };
};

exports.isEqual = isEqual;

var isSame = function isSame(left) {
  return function (right) {
    return left === right;
  };
};

exports.isSame = isSame;
var is = isSame;
exports.is = is;

var isPart = function isPart(left) {
  return function (right) {
    return (0, _collection.contains)(left, right);
  };
};

exports.isPart = isPart;

var doesContain = function doesContain(left) {
  return function (right) {
    return (0, _collection.contains)(right, left);
  };
};

exports.doesContain = doesContain;

var truthy = function truthy(right) {
  return !!right;
};

exports.truthy = truthy;

var falsy = function falsy(right) {
  return !right;
};

exports.falsy = falsy;

var everything = function everything() {
  return true;
};

exports.everything = everything;

var nothing = function nothing() {
  return false;
};

exports.nothing = nothing;

var first = function first(value, i, collection) {
  return (0, _collection.findIndex)(collection, isEqual(value)) === i;
};

exports.first = first;
var unique = first;
exports.unique = unique;

var isIn = function isIn(predicate) {
  return function (value) {
    return (0, _lib.values)(predicate).includes(value);
  };
};

exports.isIn = isIn;

var key = function key(predicate) {
  return function (dummy, value) {
    return predicate(value);
  };
};

exports.key = key;

var value = function value(predicate) {
  return function (item) {
    return predicate(item);
  };
};
/* Generators */


exports.value = value;

var not = function not(predicate) {
  return function (right) {
    for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      rest[_key - 1] = arguments[_key];
    }

    return !predicate.apply(void 0, [right].concat(rest));
  };
};

exports.not = not;

var and = function and() {
  for (var _len2 = arguments.length, predicates = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    predicates[_key2] = arguments[_key2];
  }

  return function (right) {
    for (var _len3 = arguments.length, rest = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      rest[_key3 - 1] = arguments[_key3];
    }

    return !(0, _reflection.isDefined)((0, _collection.find)(predicates, function (predicate) {
      return !predicate.apply(void 0, [right].concat(rest));
    }));
  };
};

exports.and = and;

var or = function or() {
  for (var _len4 = arguments.length, predicates = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    predicates[_key4] = arguments[_key4];
  }

  return function (right) {
    for (var _len5 = arguments.length, rest = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
      rest[_key5 - 1] = arguments[_key5];
    }

    return (0, _reflection.isDefined)((0, _collection.find)(predicates, function (predicate) {
      return predicate.apply(void 0, [right].concat(rest));
    }));
  };
};

exports.or = or;

var onProp = function onProp(prop, predicate) {
  return function (right) {
    for (var _len6 = arguments.length, rest = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
      rest[_key6 - 1] = arguments[_key6];
    }

    return predicate.apply(void 0, [right[prop]].concat(rest));
  };
};
/**
 * A function to derive predicates from collection functions like equals,
 * contains, has, shares, etc.
 */


exports.onProp = onProp;

var predicate = function predicate(fn, left) {
  for (var _len7 = arguments.length, rest = new Array(_len7 > 2 ? _len7 - 2 : 0), _key7 = 2; _key7 < _len7; _key7++) {
    rest[_key7 - 2] = arguments[_key7];
  }

  return function (right) {
    return fn.apply(void 0, [right, left].concat(rest));
  };
};

exports.predicate = predicate;