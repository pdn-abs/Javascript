"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.translate = exports.partial = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _collection = require("./collection");

var _lib = require("./lib");

var _reflection = require("./reflection");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/* Exports */

/**
 *
 * @param {Object} map
 * @returns {Function} The function used to translate a key to respective
 * value.
 * Ex: (k) => value.
 */
var translate = function translate(map) {
  return function (key) {
    return map[key];
  };
}; // eslint-disable-next-line max-lines-per-function


exports.translate = translate;

var partial = function () {
  var helpers = {
    array: {
      args: function args(fixed) {
        var j = 0;
        var placeholders = (0, _collection.reduce)(fixed, function (t, c, i // eslint-disable-next-line no-sequences
        ) {
          return c === undefined && (t[i] = j++), t;
        }, {});
        return (0, _lib.values)(placeholders).length ? function (dynamic) {
          return (0, _collection.merge)([], fixed, (0, _collection.translate)(dynamic, placeholders));
        } : function (dynamic) {
          return fixed.concat(dynamic);
        };
      },
      cb: function cb(_ref) {
        var args = _ref.args,
            fixed = _ref.fixed,
            fn = _ref.fn;
        return function () {
          for (var _len = arguments.length, dynamic = new Array(_len), _key = 0; _key < _len; _key++) {
            dynamic[_key] = arguments[_key];
          }

          return fn.apply(void 0, (0, _toConsumableArray2["default"])(args(fixed)(dynamic)));
        };
      }
    },
    object: {
      args: function args(fixed) {
        return function (dynamic) {
          return _objectSpread(_objectSpread({}, fixed), dynamic);
        };
      },
      cb: function cb(_ref2) {
        var args = _ref2.args,
            fixed = _ref2.fixed,
            fn = _ref2.fn;
        return function (dynamic) {
          return fn(args(fixed)(dynamic));
        };
      }
    }
  };
  return function (fn, fixed) {
    var _helpers$inferType = helpers[(0, _reflection.inferType)(fixed)],
        args = _helpers$inferType.args,
        cb = _helpers$inferType.cb;
    return cb({
      args: args,
      fixed: fixed,
      fn: fn
    });
  };
}();

exports.partial = partial;