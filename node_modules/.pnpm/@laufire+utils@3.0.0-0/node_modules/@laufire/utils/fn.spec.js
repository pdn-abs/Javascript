"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _collection = require("@laufire/utils/collection");

var _reflection = require("@laufire/utils/reflection");

var _helpers = require("../test/helpers");

var _fn = require("./fn");

/* Helpers */

/* Tested */
describe('cache caches the given function based on parameters' + ' till the next call with a new set of args', function () {
  test('example', function () {
    var getTime = function getTime() {
      return performance.now();
    };

    var cachedFn = (0, _fn.cache)(getTime);
    var uncachedFn = getTime;
    var resultOne = cachedFn();
    var resultTwo = cachedFn();
    var uncachedResOne = uncachedFn();
    var uncachedResTwo = uncachedFn();
    expect(resultOne).toEqual(resultTwo);
    expect(uncachedResOne).not.toEqual(uncachedResTwo);
  });
  test('complete test', function () {
    var testCache = function testCache(qualifier, callCount) {
      var fn = jest.fn(function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return args;
      });
      var cachedFn = (0, _fn.cache)(fn, qualifier);
      var symbolOne = Symbol('SymbolOne');
      var SymbolTwo = Symbol('SymbolTwo');
      var result = cachedFn(_helpers.array, symbolOne);
      expect(cachedFn(_helpers.array, symbolOne)).toEqual(result);
      expect(fn).toHaveBeenCalledTimes(1);
      cachedFn(_helpers.array, SymbolTwo);
      cachedFn(_helpers.array.slice(), SymbolTwo);
      expect(fn).toHaveBeenCalledTimes(callCount);
    };

    testCache(undefined, 3);
    testCache(_collection.equals, 2);
  });
});
test('value extracts the value from the given function or variable', function () {
  var val = Symbol('val');
  expect((0, _fn.value)(val)).toBe(val);
  expect((0, _fn.value)(function () {
    return val;
  })).toBe(val);
});
describe('defined filters the first defined value', function () {
  test('example', function () {
    var input = [undefined, 1, undefined, 2, 3];
    var expected = 1;

    var result = _fn.defined.apply(void 0, input);

    expect(result).toEqual(expected);
  });
  test('randomized test', function () {
    (0, _helpers.retry)(function () {
      var values = (0, _collection.clone)((0, _helpers.rndArray)());
      values[(0, _helpers.rndKey)(values)] = undefined;
      values.forEach(function (item, i) {
        return expect(_fn.defined.apply(void 0, (0, _toConsumableArray2["default"])(values.slice(i)))).toEqual((0, _reflection.isDefined)(item) ? item : values[i + 1]);
      });
    });
  });
});
test('self returns the same input value', function () {
  var x = Symbol('x');
  expect((0, _fn.self)(x)).toEqual(x);
});
test('identity is an alias of self', function () {
  expect(_fn.identity).toEqual(_fn.self);
});
test('nothing returns undefined', function () {
  expect((0, _fn.nothing)()).toEqual(undefined);
});