"use strict";

var _lib = require("./lib");

var _number = require("./number");

var _helpers = require("../test/helpers");

var _collection = require("@laufire/utils/collection");

describe('vary', function () {
  test('example', function () {
    var variance = 0.1;
    var result = (0, _number.vary)(variance);
    expect(result >= 0.9 && result <= 1.1).toEqual(true);
  });
  test('ratio test', function () {
    var retryCount = 10000;
    var variance = 0.005;
    var possibilities = (0, _collection.range)(100, 102).map(function (value) {
      return value / 100;
    });
    var results = (0, _helpers.retry)(function () {
      return (0, _number.vary)(variance);
    }, retryCount);
    (0, _helpers.testRatios)(results, (0, _helpers.getRatios)(possibilities));
  });
});
describe('getDR gives the distance ratio between two numbers', function () {
  test('example', function () {
    var numOne = 10;
    var numTwo = 20;
    var expected = 0.5;
    var result = (0, _number.getDR)(numOne, numTwo);
    expect(result).toEqual(expected);
  });
  test('gives infinity if numTwo is zero', function () {
    var numTwo = 0;
    var numOne = (0, _lib.rndBetween)(50, 60);
    expect((0, _number.getDR)(numOne, numTwo)).toEqual(Infinity);
  });
  test('gives zero if both numbers are zero', function () {
    var numTwo = 0;
    var numOne = 0;
    expect((0, _number.getDR)(numOne, numTwo)).toEqual(0);
  });
  test('randomized test', function () {
    var numTwo = (0, _lib.rndBetween)(50, 60);
    var result = (0, _lib.rndBetween)(70, 80) / 100;
    var numOne = numTwo - numTwo * result;
    expect((0, _helpers.fixNumber)((0, _number.getDR)(numOne, numTwo))).toEqual((0, _helpers.fixNumber)(result));
  });
});