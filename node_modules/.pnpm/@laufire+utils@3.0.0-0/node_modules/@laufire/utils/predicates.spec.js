"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _collection = require("@laufire/utils/collection");

var _random = require("@laufire/utils/random");

var _reflection = require("@laufire/utils/reflection");

var _helpers = require("../test/helpers");

var _collection2 = require("./collection");

var _lib = require("./lib");

var _predicates = require("./predicates");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/* Configs */
var numbers = [1, 2, 3, 4];
var oddNumbers = [1, 3];
var evenNumbers = [2, 4];
var primeNumbers = [2, 3];

var odd = function odd(val) {
  return oddNumbers.includes(val);
};

var even = function even(val) {
  return evenNumbers.includes(val);
};

var prime = function prime(val) {
  return primeNumbers.includes(val);
};

var number = function number(val) {
  return numbers.includes(val);
};
/* Helpers */
// eslint-disable-next-line no-shadow


var testIterator = function testIterator(_ref) {
  var predicate = _ref.predicate,
      iterable = _ref.iterable,
      expectation = _ref.expectation;
  return expect((0, _collection.clean)((0, _collection.filter)(iterable, predicate))).toEqual(expectation);
}; // TODO: Remove post fixing the testHelpers.rndCollection.


var randomCollection = function randomCollection() {
  return (0, _random.rndValue)([_collection.values, function (x) {
    return x;
  }])((0, _helpers.rndDict)());
};
/* Spec */


describe('Predicates', function () {
  var truthies = [1, '2', true, [], {}];
  var falsies = [0, '', false, undefined, null];
  var tAndFArray = (0, _collection.secure)((0, _collection.shuffle)(truthies.concat(falsies)));
  var tasks = [{
    name: 'commit',
    effort: 1
  }, {
    name: 'commit',
    effort: 2
  }, {
    name: 'push',
    effort: 3
  }];
  describe('isEqual returns a predicate to test value equality' + ' between the candidates', function () {
    test('example', function () {
      var taskToFind = {
        name: 'commit',
        effort: 1
      };
      expect((0, _collection.find)(tasks, (0, _predicates.isEqual)(taskToFind))).toEqual(taskToFind);
    });
    test('randomized test', function () {
      (0, _helpers.retry)(function () {
        var haystack = (0, _helpers.rndCollection)();
        var needle = (0, _collection.clone)((0, _random.rndValue)(haystack));
        expect((0, _collection.find)(haystack, (0, _predicates.isEqual)(needle))).toEqual(needle);
      });
    });
  });
  describe('isSame returns a predicate to test referential equality' + ' between the candidates', function () {
    test('example', function () {
      var taskToFind = tasks[0];
      expect((0, _collection.find)(tasks, (0, _predicates.isSame)(taskToFind))).toEqual(taskToFind);
    });
    test('randomized test', function () {
      (0, _helpers.retry)(function () {
        var haystack = (0, _helpers.rndCollection)();
        var needle = (0, _random.rndValue)(haystack);
        expect((0, _collection.find)(haystack, (0, _predicates.isSame)(needle))).toEqual(needle);
      });
    });
  });
  test('is is an alias for isSame', function () {
    expect(_predicates.is).toBe(_predicates.isSame);
  });
  describe('isPart returns a predicate to test whether the tested object is' + ' wholly contained in any of the elements', function () {
    test('example', function () {
      var taskToFind = tasks[0];

      var extendedTask = _objectSpread(_objectSpread({}, taskToFind), {}, {
        author: 'author'
      });

      expect((0, _collection.find)(tasks, (0, _predicates.isPart)(extendedTask))).toEqual(taskToFind);
    });
    test('randomized test', function () {
      (0, _helpers.retry)(function () {
        var haystack = (0, _helpers.rndNested)(3, 3, ['nested']);
        var extenders = {
          array: function array(needle) {
            return [].concat((0, _toConsumableArray2["default"])(needle), (0, _toConsumableArray2["default"])((0, _helpers.rndArray)()));
          },
          object: function object(needle) {
            return _objectSpread(_objectSpread({}, needle), (0, _helpers.rndDict)());
          }
        };
        var needle = (0, _random.rndValue)(haystack);
        var extendedNeedle = extenders[(0, _reflection.inferType)(needle)](needle);
        var partialNeedle = (0, _helpers.randomValues)(needle);
        expect((0, _collection.find)(haystack, (0, _predicates.isPart)(extendedNeedle))).toEqual(needle);
        expect((0, _collection.find)(haystack, (0, _predicates.isPart)(partialNeedle))).toEqual(undefined);
      });
    });
  });
  describe('doesContain returns a predicate to test whether the' + ' tested object is partially contained in any of the elements', function () {
    test('example', function () {
      var needle = {
        name: 'push'
      };
      var expectation = {
        name: 'push',
        effort: 3
      };
      expect((0, _collection.find)(tasks, (0, _predicates.doesContain)(needle))).toEqual(expectation);
      expect((0, _collection.find)(tasks, (0, _predicates.doesContain)({
        name: Symbol('name')
      }))).toEqual(undefined);
    });
    test('randomized test', function () {
      (0, _helpers.retry)(function () {
        var haystack = (0, _helpers.rndNested)(3, 3, ['object']);
        var expectation = (0, _random.rndValue)(haystack);
        var needle = (0, _helpers.randomValues)(expectation);
        expect((0, _collection.find)(haystack, (0, _predicates.doesContain)(needle))).toEqual(expectation);
      });
    });
  });
  describe('truthy tests for truthy values', function () {
    test('example', function () {
      // TODO: Replace with collections.filter post publishing.
      expect([0, 1, 'a', null].filter(_predicates.truthy)).toEqual([1, 'a']);
    });
    test('randomized test', function () {
      (0, _helpers.retry)(function () {
        var tAndFIterable = (0, _helpers.arrayOrObject)(tAndFArray);
        var fIterable = (0, _helpers.arrayOrObject)(falsies);
        var filtered = (0, _collection.values)((0, _collection.filter)(tAndFIterable, _predicates.truthy));
        expect((0, _helpers.sortArray)(filtered)).toEqual((0, _helpers.sortArray)(truthies));
        expect((0, _collection.filter)(fIterable, _predicates.truthy)).toEqual((0, _collection.shell)(fIterable));
      });
    });
  });
  describe('falsy tests for falsy values', function () {
    test('example', function () {
      // TODO: Replace with collections.filter post publishing.
      expect([0, 1, 'a', null].filter(_predicates.falsy)).toEqual([0, null]);
    });
    test('randomized test', function () {
      (0, _helpers.retry)(function () {
        var tAndFIterable = (0, _helpers.arrayOrObject)(tAndFArray);
        var tIterable = (0, _helpers.arrayOrObject)(truthies);
        var filtered = (0, _collection.values)((0, _collection.filter)(tAndFIterable, _predicates.falsy));
        expect((0, _helpers.sortArray)(filtered)).toEqual((0, _helpers.sortArray)(falsies));
        expect((0, _collection.filter)(tIterable, _predicates.falsy)).toEqual((0, _collection.shell)(tIterable));
      });
    });
  });
  describe('everything allows everything through the filter', function () {
    test('example', function () {
      expect((0, _collection.filter)(tasks, _predicates.everything)).toEqual(tasks);
    });
    test('randomized test', function () {
      (0, _helpers.retry)(function () {
        var iterable = (0, _helpers.rndCollection)();
        expect((0, _collection.filter)(iterable, _predicates.everything)).toEqual(iterable);
      });
    });
  });
  describe('nothing allows nothing through the filter', function () {
    test('example', function () {
      expect((0, _collection.filter)(tasks, _predicates.nothing)).toEqual([]);
    });
    test('randomized test', function () {
      (0, _helpers.retry)(function () {
        var iterable = (0, _helpers.rndCollection)();
        expect((0, _collection.filter)(iterable, _predicates.nothing)).toEqual((0, _collection.shell)(iterable));
      });
    });
  });
  describe('first tests for the first occurrence of the element in ' + 'the collection', function () {
    test('example', function () {
      expect(['a', 'b', 'c', 'a'].filter(_predicates.first)).toEqual(['a', 'b', 'c']); // TODO: Use imported filter post publishing.

      expect((0, _collection2.filter)({
        a: 1,
        b: 2,
        c: 1,
        d: 2
      }, _predicates.first)).toEqual({
        a: 1,
        b: 2
      });
    });
    test('randomized test', function () {
      (0, _helpers.retry)(function () {
        var baseCollection = (0, _helpers.rndCollection)();
        var baseValues = (0, _collection.values)(baseCollection);
        var subset = (0, _random.rndValues)(baseValues, (0, _lib.rndBetween)(1, baseValues.length - 1));
        var haystack = (0, _collection.map)(baseCollection, function () {
          return (0, _random.rndValue)(subset);
        }); // TODO: Remove clean post publishing.

        var expectation = (0, _collection.clean)((0, _collection.filter)(haystack, function (val, i) {
          return (0, _collection.findIndex)(haystack, function (childValue) {
            return childValue === val;
          }) === i;
        }));
        expect((0, _collection2.filter)(haystack, _predicates.first)).toEqual(expectation);
      });
    });
  });
  test('unique is an alias of first.', function () {
    expect(_predicates.unique).toBe(_predicates.first);
  });
  describe('not returns the inverse of the given predicate', function () {
    test('example', function () {
      // TODO: Remove clean post publishing.
      expect((0, _collection.clean)((0, _collection.filter)(numbers, (0, _predicates.not)(odd)))).toEqual(evenNumbers);
      expect((0, _collection.find)(numbers, (0, _predicates.not)(number))).toEqual(undefined);
    });
    test('randomized test', function () {
      (0, _helpers.retry)(function () {
        var iterable = randomCollection();
        var selector = (0, _helpers.rndKey)(iterable);
        var needle = iterable[selector]; // eslint-disable-next-line no-shadow

        var predicate = (0, _predicates.not)((0, _predicates.isEqual)(needle)); // TODO: Remove clean post publishing.

        var expectation = (0, _collection.clean)((0, _collection.omit)(iterable, [selector]));
        testIterator({
          predicate: predicate,
          iterable: iterable,
          expectation: expectation
        });
      });
    });
  });
  describe('and returns a predicate to test the candidates to pass' + ' all the given predicates', function () {
    test('example', function () {
      expect((0, _collection.find)(numbers, (0, _predicates.and)(odd, prime))).toEqual(3);
      expect((0, _collection.find)(numbers, (0, _predicates.and)(even, prime))).toEqual(2);
      expect((0, _collection.find)(numbers, (0, _predicates.and)(prime, (0, _predicates.not)(number)))).toEqual(undefined);
    });
    test('randomized test', function () {
      (0, _helpers.retry)(function () {
        var iterable = randomCollection();
        var selector = (0, _helpers.rndKey)(iterable);
        var needle = iterable[selector]; // eslint-disable-next-line no-shadow

        var predicate = (0, _predicates.and)((0, _predicates.isEqual)(needle), (0, _predicates.isSame)(needle));
        var expectation = (0, _collection.clean)((0, _collection.select)(iterable, [selector]));
        testIterator({
          predicate: predicate,
          iterable: iterable,
          expectation: expectation
        });
      });
    });
  });
  describe('or returns a predicate to test the candidates to pass' + ' at least one among multiple predicates', function () {
    test('example', function () {
      expect((0, _collection.find)(numbers, (0, _predicates.or)(even, prime))).toEqual(2);
      expect((0, _collection.filter)(numbers, (0, _predicates.or)(odd, even))).toEqual(numbers);
      expect((0, _collection.find)(numbers, (0, _predicates.or)((0, _predicates.isEqual)('a'), (0, _predicates.isEqual)('b')))).toEqual(undefined);
    });
    test('randomized test', function () {
      (0, _helpers.retry)(function () {
        var iterable = randomCollection();
        var selector = (0, _random.rndValues)((0, _collection.keys)(iterable), 2);
        var needleOne = iterable[selector[0]];
        var needleTwo = iterable[selector[1]]; // eslint-disable-next-line no-shadow

        var predicate = (0, _predicates.or)((0, _predicates.isSame)(needleOne), (0, _predicates.isSame)(needleTwo));
        var expectation = (0, _collection.clean)((0, _collection.select)(iterable, selector));
        testIterator({
          predicate: predicate,
          iterable: iterable,
          expectation: expectation
        });
      });
    });
  });
  describe('onProp returns a predicate to test the given prop across' + ' candidates of a collection', function () {
    test('example', function () {
      // eslint-disable-next-line no-shadow
      var predicate = (0, _predicates.onProp)('name', (0, _predicates.isEqual)('push'));
      expect((0, _collection.find)(tasks, predicate)).toEqual({
        name: 'push',
        effort: 3
      });
    });
    test('randomized test', function () {
      (0, _helpers.retry)(function () {
        var haystack = (0, _helpers.rndNested)(3, 3, ['nested']);
        var expectation = (0, _random.rndValue)(haystack);
        var prop = (0, _helpers.rndKey)(expectation);
        var needle = expectation[prop];
        expect((0, _collection.find)(haystack, (0, _predicates.onProp)(prop, (0, _predicates.isEqual)(needle)))).toEqual(expectation);
      });
    });
  });
  describe('generators pass all available arguments' + ' to the given predicates', function () {
    var childCollection = (0, _random.rndValue)(_helpers.collection);
    var childKey = (0, _helpers.rndKey)(childCollection);
    var generators = {
      and: _predicates.and,
      or: _predicates.or,
      not: _predicates.not
    };
    var mockPredicate = jest.fn();
    test.each((0, _collection.values)(generators))('testing the generator: %s for args', function (generator) {
      var _expect;

      var args = [childCollection[childKey], childKey, childCollection];
      (0, _collection.filter)(childCollection, generator(mockPredicate));

      (_expect = expect(mockPredicate)).toHaveBeenCalledWith.apply(_expect, args);
    });
    test('the generator onProp passes args properly', function () {
      var _expect2;

      var mockCollection = (0, _defineProperty2["default"])({}, childKey, childCollection);
      var prop = (0, _helpers.rndKey)(childCollection);
      var args = [childCollection[prop], childKey, mockCollection];
      (0, _collection.filter)(mockCollection, (0, _predicates.onProp)(prop, mockPredicate));

      (_expect2 = expect(mockPredicate)).toHaveBeenCalledWith.apply(_expect2, args);
    });
  });
  describe('predicate derives predicates from relevant' + ' collection functions', function () {
    test('example', function () {
      var taskToFind = tasks[0];
      expect((0, _collection.find)(tasks, (0, _predicates.predicate)(_collection.equals, taskToFind))).toEqual(taskToFind);
      expect((0, _collection.find)(tasks, (0, _predicates.predicate)(_collection.contains, taskToFind))).toEqual(taskToFind);
    });
    test('detailed example', function () {
      var mockCollection = _objectSpread(_objectSpread({}, _helpers.extCollection), {}, {
        isolated: _helpers.isolated
      });

      expect((0, _collection.filter)(mockCollection, (0, _predicates.predicate)(_collection.shares, _helpers.isolated, (0, _helpers.rndKey)(_helpers.isolated)))).toEqual({
        isolated: _helpers.isolated
      });
    });
    test('randomized test', function () {
      (0, _helpers.retry)(function () {
        var haystack = (0, _helpers.rndNested)(3, 3, ['nested', 'object', 'array']);
        var needle = (0, _random.rndValue)(haystack);
        var predicateFn = (0, _predicates.predicate)(_collection.shares, needle, (0, _helpers.rndKey)(needle));
        expect((0, _collection.find)(haystack, predicateFn)).toEqual(needle);
      });
    });
  });
  describe('isIn returns a predicate to check for a given values' + ' in collections', function () {
    test('example', function () {
      var extendedTasks = [].concat(tasks, [{
        name: 'rebase',
        effort: 3
      }]);
      expect((0, _collection.filter)(extendedTasks, (0, _predicates.isIn)(tasks))).toEqual(tasks);
    });
    test('randomized test', function () {
      var iterable = (0, _helpers.rndCollection)();
      var needle = (0, _helpers.randomValues)(iterable); // TODO: Remove clean post publishing.

      expect((0, _collection.clean)((0, _collection.filter)(iterable, (0, _predicates.isIn)(needle)))).toEqual(needle);
    });
  });
  describe('key passes the keys of iterated iterables' + ' to the given predicate', function () {
    test('example', function () {
      var cart = {
        item: 'apple',
        price: 100
      };
      expect((0, _collection.find)(cart, (0, _predicates.key)((0, _predicates.isEqual)('item')))).toEqual('apple');
      expect((0, _collection.find)(cart, (0, _predicates.key)((0, _predicates.isEqual)('price')))).toEqual(100);
    });
    test('randomized test', function () {
      (0, _helpers.retry)(function () {
        var haystack = (0, _helpers.rndCollection)(); // TODO: Remove String function post publishing.

        var needle = String((0, _helpers.rndKey)(haystack));
        var expectation = haystack[needle];
        expect((0, _collection.find)(haystack, (0, _predicates.key)((0, _predicates.isEqual)(needle)))).toEqual(expectation);
      });
    });
  });
  describe('value passes the values of iterated iterables' + ' to the given predicate', function () {
    test('example', function () {
      var cart = {
        item: 'apple',
        price: 100
      };
      expect((0, _collection.find)(cart, (0, _predicates.value)((0, _predicates.isEqual)('apple')))).toEqual('apple');
      expect((0, _collection.find)(cart, (0, _predicates.value)((0, _predicates.isEqual)(100)))).toEqual(100);
    });
    test('randomized test', function () {
      (0, _helpers.retry)(function () {
        var haystack = (0, _helpers.rndCollection)();
        var needle = (0, _random.rndValue)(haystack);
        expect((0, _collection.find)(haystack, (0, _predicates.value)((0, _predicates.isEqual)(needle)))).toEqual(needle);
      });
    });
  });
});